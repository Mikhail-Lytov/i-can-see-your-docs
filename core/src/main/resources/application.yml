--- #app config
app:
  descew:
    api-url: ${APP_DESCEW_API_URL:http://127.0.0.1:1338}
    file-names: >
        table_1.png
        table_1_2.png
        table_2_1.png
        table_2_2.png
        table_3_1.png
        table_3_2.png
        table_4_1.png
        table_4_2.png
        table_5_1.png
        table_5_2.png
        last_number.png

--- #spring server
spring:
  messages:
    encoding: UTF-8
  servlet:
    multipart:
      max-file-size: ${MAX_FILE_SIZE:100MB}
      max-request-size: ${MAX_FILE_SIZE:100MB}
  application:
    name: core
  main:
    banner-mode: off
server:
  servlet:
    encoding:
      charset: UTF-8
      force: true
  tomcat:
    max-swallow-size: ${MAX_FILE_SIZE:100MB}


--- #spring ai
spring:
  ai:
    image:
      observations:
        log-prompt: ${AI_IMAGE_OBSERVATIONS_PROMPT_EXPOSE:true}
    chat:
      client:
        observations:
          log-prompt: ${AI_CHAT_CLIENT_OBSERVATIONS_PROMPT_EXPOSE:true}
    openai:
      chat:
        options:
          model: o4-mini
          temperature: 1 # only available temperature for o4-mini
      api-key: ${OPENAI_API_KEY}

--- #spring datasource
spring:
  datasource:
    url: ${DATASOURCE_URL:jdbc:postgresql://localhost:5432/ocr}
    username: ${DATASOURCE_USERNAME:admin}
    password: ${DATASOURCE_PASSWORD:admin}
  flyway:
    enabled: true
    locations: classpath:db/migration

--- #s3
aws:
  access-key: ${AWS_ACCESS_KEY:minioadmin}
  secret-key: ${AWS_SECRET_KEY:minioadmin}
  region: ${AWS_REGION:eu-central-1} #Any (MinIO doesn't care, but required by SDK)
  s3-bucket: ${AWS_S3_BUCKET:ocr}
  s3-endpoint: ${AWS_S3_ENDPOINT:http://localhost:9000}

--- #swagger
springdoc:
  swagger-ui:
    enabled: true                  # Enable Swagger UI
    deep-linking: true             # Enable deep linking
  api-docs:
    path: /api-docs                # Path to OpenAPI docs

--- #observability
management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, prometheus
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
          spring:
            ai:
              chat:
                client: true
          db:
            vector:
              client:
                operation: true
          gen_ai:
            client:
              operation: true
        spring:
          ai:
            chat:
              client: true
        db:
          vector:
            client:
              operation: true
        gen_ai:
          client:
            operation: true
        do.sleep.method.timed: true
        http.server.requests: true
      percentiles:
        do.sleep.method.timed: 0.99, 0.95, 0.9, 0.7, 0.5
        http.server.requests: 0.99, 0.95, 0.9, 0.7, 0.5
      minimum-expected-value:
        do.sleep.method.timed: 100ms
        http.server.requests: 100ms
      maximum-expected-value:
        do.sleep.method.timed: 10s
        http.server.requests: 10s
  observations:
    key-values:
      application: ${spring.application.name}
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans
  tracing:
    sampling:
      probability: 1.0